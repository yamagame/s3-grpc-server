// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.6
// source: proto/grpc_server/table_repository.proto

package grpc_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TableRepository_Create_FullMethodName = "/TableRepository/Create"
	TableRepository_Read_FullMethodName   = "/TableRepository/Read"
	TableRepository_Update_FullMethodName = "/TableRepository/Update"
	TableRepository_Delete_FullMethodName = "/TableRepository/Delete"
)

// TableRepositoryClient is the client API for TableRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableRepositoryClient interface {
	// Create
	Create(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error)
	// Read
	Read(ctx context.Context, in *ReadTableRequest, opts ...grpc.CallOption) (*ReadTableResponse, error)
	// Update
	Update(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*UpdateTableResponse, error)
	// Delete
	Delete(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error)
}

type tableRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewTableRepositoryClient(cc grpc.ClientConnInterface) TableRepositoryClient {
	return &tableRepositoryClient{cc}
}

func (c *tableRepositoryClient) Create(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error) {
	out := new(CreateTableResponse)
	err := c.cc.Invoke(ctx, TableRepository_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableRepositoryClient) Read(ctx context.Context, in *ReadTableRequest, opts ...grpc.CallOption) (*ReadTableResponse, error) {
	out := new(ReadTableResponse)
	err := c.cc.Invoke(ctx, TableRepository_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableRepositoryClient) Update(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*UpdateTableResponse, error) {
	out := new(UpdateTableResponse)
	err := c.cc.Invoke(ctx, TableRepository_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableRepositoryClient) Delete(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error) {
	out := new(DeleteTableResponse)
	err := c.cc.Invoke(ctx, TableRepository_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TableRepositoryServer is the server API for TableRepository service.
// All implementations must embed UnimplementedTableRepositoryServer
// for forward compatibility
type TableRepositoryServer interface {
	// Create
	Create(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	// Read
	Read(context.Context, *ReadTableRequest) (*ReadTableResponse, error)
	// Update
	Update(context.Context, *UpdateTableRequest) (*UpdateTableResponse, error)
	// Delete
	Delete(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error)
	mustEmbedUnimplementedTableRepositoryServer()
}

// UnimplementedTableRepositoryServer must be embedded to have forward compatible implementations.
type UnimplementedTableRepositoryServer struct {
}

func (UnimplementedTableRepositoryServer) Create(context.Context, *CreateTableRequest) (*CreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTableRepositoryServer) Read(context.Context, *ReadTableRequest) (*ReadTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedTableRepositoryServer) Update(context.Context, *UpdateTableRequest) (*UpdateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTableRepositoryServer) Delete(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTableRepositoryServer) mustEmbedUnimplementedTableRepositoryServer() {}

// UnsafeTableRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableRepositoryServer will
// result in compilation errors.
type UnsafeTableRepositoryServer interface {
	mustEmbedUnimplementedTableRepositoryServer()
}

func RegisterTableRepositoryServer(s grpc.ServiceRegistrar, srv TableRepositoryServer) {
	s.RegisterService(&TableRepository_ServiceDesc, srv)
}

func _TableRepository_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableRepositoryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableRepository_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableRepositoryServer).Create(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableRepository_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableRepositoryServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableRepository_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableRepositoryServer).Read(ctx, req.(*ReadTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableRepository_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableRepositoryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableRepository_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableRepositoryServer).Update(ctx, req.(*UpdateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableRepository_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableRepositoryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableRepository_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableRepositoryServer).Delete(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TableRepository_ServiceDesc is the grpc.ServiceDesc for TableRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TableRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TableRepository",
	HandlerType: (*TableRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TableRepository_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _TableRepository_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TableRepository_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TableRepository_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc_server/table_repository.proto",
}
