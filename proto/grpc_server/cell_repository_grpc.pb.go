// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.6
// source: proto/grpc_server/cell_repository.proto

package grpc_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CellRepository_Create_FullMethodName = "/CellRepository/Create"
	CellRepository_Read_FullMethodName   = "/CellRepository/Read"
	CellRepository_Update_FullMethodName = "/CellRepository/Update"
	CellRepository_Delete_FullMethodName = "/CellRepository/Delete"
	CellRepository_List_FullMethodName   = "/CellRepository/List"
)

// CellRepositoryClient is the client API for CellRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CellRepositoryClient interface {
	// Create
	Create(ctx context.Context, in *CreateCellRequest, opts ...grpc.CallOption) (*CreateCellResponse, error)
	// Read
	Read(ctx context.Context, in *ReadCellRequest, opts ...grpc.CallOption) (*ReadCellResponse, error)
	// Update
	Update(ctx context.Context, in *UpdateCellRequest, opts ...grpc.CallOption) (*UpdateCellResponse, error)
	// Delete
	Delete(ctx context.Context, in *DeleteCellRequest, opts ...grpc.CallOption) (*DeleteCellResponse, error)
	// List
	List(ctx context.Context, in *ListCellRequest, opts ...grpc.CallOption) (*ListCellResponse, error)
}

type cellRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewCellRepositoryClient(cc grpc.ClientConnInterface) CellRepositoryClient {
	return &cellRepositoryClient{cc}
}

func (c *cellRepositoryClient) Create(ctx context.Context, in *CreateCellRequest, opts ...grpc.CallOption) (*CreateCellResponse, error) {
	out := new(CreateCellResponse)
	err := c.cc.Invoke(ctx, CellRepository_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellRepositoryClient) Read(ctx context.Context, in *ReadCellRequest, opts ...grpc.CallOption) (*ReadCellResponse, error) {
	out := new(ReadCellResponse)
	err := c.cc.Invoke(ctx, CellRepository_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellRepositoryClient) Update(ctx context.Context, in *UpdateCellRequest, opts ...grpc.CallOption) (*UpdateCellResponse, error) {
	out := new(UpdateCellResponse)
	err := c.cc.Invoke(ctx, CellRepository_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellRepositoryClient) Delete(ctx context.Context, in *DeleteCellRequest, opts ...grpc.CallOption) (*DeleteCellResponse, error) {
	out := new(DeleteCellResponse)
	err := c.cc.Invoke(ctx, CellRepository_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellRepositoryClient) List(ctx context.Context, in *ListCellRequest, opts ...grpc.CallOption) (*ListCellResponse, error) {
	out := new(ListCellResponse)
	err := c.cc.Invoke(ctx, CellRepository_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CellRepositoryServer is the server API for CellRepository service.
// All implementations must embed UnimplementedCellRepositoryServer
// for forward compatibility
type CellRepositoryServer interface {
	// Create
	Create(context.Context, *CreateCellRequest) (*CreateCellResponse, error)
	// Read
	Read(context.Context, *ReadCellRequest) (*ReadCellResponse, error)
	// Update
	Update(context.Context, *UpdateCellRequest) (*UpdateCellResponse, error)
	// Delete
	Delete(context.Context, *DeleteCellRequest) (*DeleteCellResponse, error)
	// List
	List(context.Context, *ListCellRequest) (*ListCellResponse, error)
	mustEmbedUnimplementedCellRepositoryServer()
}

// UnimplementedCellRepositoryServer must be embedded to have forward compatible implementations.
type UnimplementedCellRepositoryServer struct {
}

func (UnimplementedCellRepositoryServer) Create(context.Context, *CreateCellRequest) (*CreateCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCellRepositoryServer) Read(context.Context, *ReadCellRequest) (*ReadCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedCellRepositoryServer) Update(context.Context, *UpdateCellRequest) (*UpdateCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCellRepositoryServer) Delete(context.Context, *DeleteCellRequest) (*DeleteCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCellRepositoryServer) List(context.Context, *ListCellRequest) (*ListCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCellRepositoryServer) mustEmbedUnimplementedCellRepositoryServer() {}

// UnsafeCellRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CellRepositoryServer will
// result in compilation errors.
type UnsafeCellRepositoryServer interface {
	mustEmbedUnimplementedCellRepositoryServer()
}

func RegisterCellRepositoryServer(s grpc.ServiceRegistrar, srv CellRepositoryServer) {
	s.RegisterService(&CellRepository_ServiceDesc, srv)
}

func _CellRepository_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellRepositoryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CellRepository_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellRepositoryServer).Create(ctx, req.(*CreateCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellRepository_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellRepositoryServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CellRepository_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellRepositoryServer).Read(ctx, req.(*ReadCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellRepository_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellRepositoryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CellRepository_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellRepositoryServer).Update(ctx, req.(*UpdateCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellRepository_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellRepositoryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CellRepository_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellRepositoryServer).Delete(ctx, req.(*DeleteCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellRepository_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellRepositoryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CellRepository_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellRepositoryServer).List(ctx, req.(*ListCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CellRepository_ServiceDesc is the grpc.ServiceDesc for CellRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CellRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CellRepository",
	HandlerType: (*CellRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CellRepository_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _CellRepository_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CellRepository_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CellRepository_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CellRepository_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc_server/cell_repository.proto",
}
